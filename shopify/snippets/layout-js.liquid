<script>
	window.__webpack_public_path__ = "{{ asset_path }}";
	/**
	* Configurables and Namespace.
	* @module configurables
	* @title Configurables and Namespace
	*/
	(function() {
		/**
		* Application namespace.
		* @class theme
		* @for window
		* @namespace window
		* @static
		*/
		var theme_config = {
			moneyFormat : {{ shop.money_format | json }},
			moneyFormatWithCurrency : {{ shop.money_with_currency_format | json }},
			stylesheet : "{{ 'bundle.css' | asset_url }}",
			url : '{{ shop.metafields.ollistsapp.appurl }}',
			settings : {
				predictiveSearchEnabled: {{ settings.predictive_search_enabled | json }},
				predictiveSearchShowPrice: {{ settings.predictive_search_show_price | json }},
				predictiveSearchShowVendor: {{ settings.predictive_search_show_vendor | json }}
			},
			main_info : {
				customerid: '{{ customer.id }}',
				iid: '{{ shop.metafields.ollistsapp.iid }}',
				shop: '{{ shop.permanent_domain }}',
				domain: '{{ shop.domain }}',
			},
			strings : {
				addToCart: {{ 'products.product.add_to_cart' | t | json }},
				soldOut: {{ 'products.product.sold_out' | t | json }},
				unavailable: {{ 'products.product.unavailable' | t | json }},
				regularPrice: {{ 'products.product.regular_price' | t | json }},
				salePrice: {{ 'products.product.sale_price' | t | json }},
				sale: {{ 'products.product.on_sale' | t | json }},
				fromLowestPrice: {{ 'products.product.from_lowest_price_html' | t: lowest_price: '[price]' | json }},
				vendor: {{'products.product.vendor' | t | json }},
				showMore: {{ 'general.filters.show_more' | t | json }},
				showLess: {{ 'general.filters.show_less' | t | json }},
				searchFor: {{ 'general.search.search_for' | t | json }},
				addressError: {{ 'sections.map.address_error' | t | json }},
				addressNoResults: {{ 'sections.map.address_no_results' | t | json }},
				addressQueryLimit: {{ 'sections.map.address_query_limit_html' | t | json }},
				authError: {{ 'sections.map.auth_error_html' | t | json }},
				newWindow: {{ 'general.accessibility.link_messages.new_window' | t | json }},
				external: {{ 'general.accessibility.link_messages.external' | t | json }},
				newWindowExternal: {{ 'general.accessibility.link_messages.new_window_and_external' | t | json }},
				removeLabel: {{ 'cart.label.remove' | t: product: '[product]' | json }},
				update: {{ 'cart.label.update' | t | json }},
				quantity: {{ 'cart.label.quantity' | t | json }},
				discountedTotal: {{ 'cart.label.discounted_total' | t | json }},
				regularTotal: {{ 'cart.label.regular_total' | t | json }},
				priceColumn: {{ 'cart.label.price_column' | t | json }},
				quantityMinimumMessage: {{ 'products.product.quantity_minimum_message' | t | json }},
				cartError: {{ 'cart.general.cart_error' | t | json }},
				removedItemMessage: {{ 'cart.general.removed_item_html' | t: quantity: '[quantity]', link: '[link]' | json }},
				unitPrice: {{ 'products.product.unit_price_label' | t | json }},
				unitPriceSeparator: {{ 'general.accessibility.unit_price_separator' | t | json }},
				oneCartCount: {{ 'cart.popup.cart_count' | t: count: 1 | json }},
				otherCartCount: {{ 'cart.popup.cart_count' | t: count: '[count]' | json }},
				quantityLabel: {{ 'cart.popup.quantity_label' | t: quantity_count: '[count]' | json }},
				products: {{ 'general.search.products' | t | json }},
				loading: {{ 'general.search.loading' | t | json }},
				number_of_results: {{ 'general.search.number_of_results' | t: result_number: '[result_number]', results_count: '[results_count]' | json }},
				number_of_results_found: {{ 'general.search.number_of_results_found' | t: results_count: '[results_count]' | json }},
				one_result_found: {{ 'general.search.one_result_found' | t | json }}
			}
		};
		this.theme_config = Object.assign(this.theme_config || {}, theme_config);

		this.texture_obj = (function() {
			{%- assign str = '{' -%}
			{%- for i in (1..100) -%}
				{%- assign key = 'filter_color' | append:i -%}
				{%- unless settings[key] == blank -%}
					{%- assign image = 'filter_color' | append:i | append:'.png' -%}
					{%- assign image = image | asset_url -%}
					{%- if str.size > 1 -%}{%- assign str = str | append: ',' -%}{%- endif -%}
						{%- assign str = str | append:'"' | append: settings[key] | append:'"' | append: ':' | append:'"' | append: image | append:'"' -%}
				{%- endunless -%}
			{%- endfor -%}
			{%- assign str = str | append: '}' -%}
			return JSON.parse('{{ str }}');
		})();

		this.performance.mark('theme_stylesheet_loaded.start');
		console.time('theme_stylesheet_loaded');

		this.onLoadStylesheet = () => {
			this.performance.mark('theme_stylesheet_loaded.end');
			this.performance.measure('theme_stylesheet_loaded', 'theme_stylesheet_loaded.start', 'theme_stylesheet_loaded.end');
			const link = document.querySelector(`link[href="${this.theme_config.stylesheet}"]`);
			link.loaded = true;
			link.dispatchEvent(new Event('load'));
			console.timeEnd('theme_stylesheet_loaded');
		}

		{%- if settings.show_helper -%}
			this.adminlinks = '{{ settings.helper_info }}'
		{%- endif -%}

	}).call(window);

	// remove no-js class
	document.documentElement.className = document.documentElement.className.replace("no-js", "js");
</script>
